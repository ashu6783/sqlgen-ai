import os
import time
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import aiohttp

from schema_prompter import create_prompt
from llama_infer import run_inference

app = FastAPI()

class QueryRequest(BaseModel):
    query: str

@app.get("/health")
async def health_check():
    return {"status": "ok"}

@app.post("/generate")
async def generate_sql(request: QueryRequest):
    try:
        async with aiohttp.ClientSession() as session:
            schema_url = os.getenv("SCHEMA_API_URL", "http://localhost:5000")
            async with session.get(f"{schema_url}/schema") as response:
                if response.status != 200:
                    raise HTTPException(status_code=500, detail='Failed to fetch schema')
                schema = await response.json()
            
            prompt = create_prompt(request.query, schema)
            sql = await run_inference(prompt)

            if not sql:
                raise HTTPException(status_code=500, detail="No SQL generated by inference service")

            return {"sql": sql}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
