import express from 'express';
import pool from '../mysql.js';
import axios from 'axios';
import { redis } from '../../index.js';

const router = express.Router();

router.post('/', async (req, res) => {
    const { query } = req.body;

    console.log(`\n[INFO] Incoming request with query: "${query}"`);

    if (!query) {
        console.error('[ERROR] No query provided in request body');
        return res.status(400).json({ error: 'No query provided' });
    }

    const cacheKey = `query:${query}`;

    try {
        // ðŸ§  Check Redis Cache
        console.log(`[INFO] Checking Redis cache for key: ${cacheKey}`);
        const cachedResult = await redis.get(cacheKey);

        if (cachedResult) {
            console.log('[INFO] Returning cached result');
            return res.json({ source: 'cache', ...JSON.parse(cachedResult) });
        }

        const aiServiceUrl = process.env.AI_SERVICE_URL || 'http://localhost:8000';

        // ðŸ”Œ Check AI Service Health
        try {
            console.log(`[INFO] Checking AI service health at: ${aiServiceUrl}/health`);
            await axios.get(`${aiServiceUrl}/health`, { timeout: 5000 });
        } catch (healthError) {
            console.error(`[ERROR] AI service unavailable: ${healthError.message}`);
            return res.status(503).json({
                error: 'AI service unavailable',
                details: `Cannot connect to AI service at ${aiServiceUrl}. Error: ${healthError.message}`
            });
        }

        // ðŸ¤– Generate SQL using AI service
        console.log(`[INFO] Sending query to AI service at: ${aiServiceUrl}/generate`);
        const aiResponse = await axios.post(
            `${aiServiceUrl}/generate`,
            { query },
            {
                headers: { 'Content-Type': 'application/json' },
                timeout: 1600000
            }
        );

        const sql = aiResponse.data.sql;
        console.log(`[INFO] AI-generated SQL: ${sql}`);

        if (!sql) {
            console.error('[ERROR] No SQL generated by AI service');
            return res.status(500).json({ error: 'No SQL generated by AI service' });
        }

        // ðŸ§ª Check DB Connection
        try {
            console.log('[INFO] Verifying database connection...');
            await pool.query('SELECT 1');
        } catch (dbTestError) {
            console.error('[ERROR] Database connection failed:', dbTestError.message);
            return res.status(500).json({
                error: 'Database connection failed',
                details: dbTestError.message
            });
        }

        // ðŸ“Š Execute SQL on MySQL
        try {
            console.log('[INFO] Executing SQL on database...');
            const [results] = await pool.query(sql);

            const finalResult = {
                sql,
                results,
                rowCount: results.length
            };

            console.log(`[INFO] Query executed successfully. Rows returned: ${results.length}`);

            // ðŸ’¾ Store in Redis cache
            await redis.set(cacheKey, JSON.stringify(finalResult), 'EX', 3600); // cache for 1 hour
            console.log(`[INFO] Result cached in Redis with key: ${cacheKey}`);

            return res.json(finalResult);
        } catch (sqlError) {
            console.error('[ERROR] SQL execution failed:', sqlError.message);
            return res.status(400).json({
                error: 'SQL execution failed',
                sql: sql,
                details: sqlError.message
            });
        }

    } catch (error) {
        if (error.code === 'ECONNREFUSED') {
            console.error('[ERROR] Service unavailable:', error.message);
            return res.status(503).json({
                error: 'Service unavailable',
                details: `Cannot connect to required service. ${error.message}`
            });
        } else if (error.response) {
            console.error('[ERROR] Response error from AI service:', error.response.data);
            return res.status(error.response.status || 500).json({
                error: 'Service error',
                details: error.response.data
            });
        } else {
            console.error('[ERROR] Internal server error:', error.message);
            return res.status(500).json({
                error: 'Internal server error',
                details: error.message,
                stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
            });
        }
    }
});

export default router;
