import express from 'express';
import pool from '../mysql.js';
import axios from 'axios';

const router = express.Router();

/**
 * @swagger
 * /generate:
 *   post:
 *     summary: Generate SQL from natural language
 *     description: Sends a natural language query to the AI service, converts it to SQL, executes it, and returns the result.
 *     tags:
 *       - SQL Generator
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - query
 *             properties:
 *               query:
 *                 type: string
 *                 example: Show all customers from NY
 *     responses:
 *       200:
 *         description: SQL and results
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 sql:
 *                   type: string
 *                   example: SELECT * FROM customers WHERE state = 'NY';
 *                 results:
 *                   type: array
 *                   items:
 *                     type: object
 *                   example:
 *                     - id: 1
 *                       name: John Doe
 *                       state: NY
 *                     - id: 2
 *                       name: Jane Smith
 *                       state: NY
 *                 rowCount:
 *                   type: integer
 *                   example: 2
 *       400:
 *         description: Missing query or SQL execution failed
 *       500:
 *         description: Internal server or database error
 *       503:
 *         description: AI service is unavailable
 */

router.post('/', async (req, res) => {
    console.log('=== QUERY ROUTE DEBUG ===');
    console.log('Request body:', req.body);
    console.log('Request headers:', req.headers);

    const { query } = req.body;

    if (!query) {
        console.log('No query provided');
        return res.status(400).json({ error: 'No query provided' });
    }

    console.log('Query received:', query);

    try {
        const aiServiceUrl = process.env.AI_SERVICE_URL || 'http://localhost:8000';
        console.log('AI Service URL:', aiServiceUrl);

        // Test AI service connection
        try {
            const healthCheck = await axios.get(`${aiServiceUrl}/health`, { timeout: 5000 });
            console.log('AI service health check passed:', healthCheck.data);
        } catch (healthError) {
            console.error('AI service health check failed:', healthError.message);
            return res.status(503).json({
                error: 'AI service unavailable',
                details: `Cannot connect to AI service at ${aiServiceUrl}. Error: ${healthError.message}`
            });
        }

        console.log('Sending request to AI service...');
        const aiResponse = await axios.post(`${aiServiceUrl}/generate`,
            { query },
            {
                headers: { 'Content-Type': 'application/json' },
                timeout: 1600000
            }
        );

        console.log('AI service response:', aiResponse.data);
        const sql = aiResponse.data.sql;

        if (!sql) {
            console.error('No SQL generated by AI service');
            return res.status(500).json({ error: 'No SQL generated by AI service' });
        }

        console.log('Generated SQL:', sql);

        // Test DB connection
        try {
            await pool.query('SELECT 1');
            console.log('Database connection test passed');
        } catch (dbTestError) {
            console.error('Database connection test failed:', dbTestError.message);
            return res.status(500).json({
                error: 'Database connection failed',
                details: dbTestError.message
            });
        }

        console.log('Executing SQL query...');
        try {
            const [results] = await pool.query(sql);
            console.log(`Query executed successfully, returned ${results.length} rows`);

            res.json({
                sql,
                results,
                rowCount: results.length
            });
        } catch (sqlError) {
            console.error('SQL execution error:', sqlError.message);
            res.status(400).json({
                error: 'SQL execution failed',
                sql: sql,
                details: sqlError.message
            });
        }

    } catch (error) {
        console.error('Unexpected error in query route:', error);
        console.error('Error stack:', error.stack);

        if (error.code === 'ECONNREFUSED') {
            res.status(503).json({
                error: 'Service unavailable',
                details: `Cannot connect to required service. ${error.message}`
            });
        } else if (error.response) {
            console.error('Service error response:', error.response.data);
            res.status(error.response.status || 500).json({
                error: 'Service error',
                details: error.response.data
            });
        } else {
            res.status(500).json({
                error: 'Internal server error',
                details: error.message,
                stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
            });
        }
    }
});

export default router;
